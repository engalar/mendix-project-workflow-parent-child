// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package advanced_excel.actions;

import com.mendix.core.Core;
import com.mendix.logging.ILogNode;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import advanced_excel.proxies.DocumentType;
import advanced_excel.Utils;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;

/**
 * Write a converted value to a cell, defined by its index.
 * Accepts format for the target cell
 */
public class Cell_WriteByIndex extends CustomJavaAction<java.lang.Boolean>
{
	private java.lang.String SheetName;
	private java.lang.Long Row;
	private java.lang.Long Column;
	private java.lang.String CellValue;
	private advanced_excel.proxies.CellType CellType;
	private IMendixObject __CellFormat;
	private advanced_excel.proxies.CellFormat CellFormat;

	public Cell_WriteByIndex(IContext context, java.lang.String SheetName, java.lang.Long Row, java.lang.Long Column, java.lang.String CellValue, java.lang.String CellType, IMendixObject CellFormat)
	{
		super(context);
		this.SheetName = SheetName;
		this.Row = Row;
		this.Column = Column;
		this.CellValue = CellValue;
		this.CellType = CellType == null ? null : advanced_excel.proxies.CellType.valueOf(CellType);
		this.__CellFormat = CellFormat;
	}

	@java.lang.Override
	public java.lang.Boolean executeAction() throws Exception
	{
		this.CellFormat = __CellFormat == null ? null : advanced_excel.proxies.CellFormat.initialize(getContext(), __CellFormat);

		// BEGIN USER CODE
		try
		{
			DocumentType docType = Utils.GetDocumentType();
			Workbook workbook = Utils.GetWorkBook();
			
			if (docType == DocumentType.XLS) {
				HSSFSheet sheet = ((HSSFWorkbook)workbook).getSheet(this.SheetName);
				if (sheet == null) { throw new Exception("Sheet: " + this.SheetName + " not found!"); }
				
				HSSFCellStyle style = ((HSSFWorkbook)workbook).createCellStyle();
				Utils.CreateStyle(workbook, style, this.CellFormat, docType);
				if (this.CellType == CellType.datetime && this.CellFormat != null && this.CellFormat.getCustomFormat() == null) {
					style.setDataFormat(workbook.getCreationHelper().createDataFormat().getFormat("yyyy-MM-dd HH:mm:ss"));
				}
				
				Integer rowNum = this.Row.intValue();
				Integer colNum = this.Column.intValue();
				
				HSSFRow row = sheet.getRow(rowNum);
				if (row == null) {
					row = sheet.createRow(rowNum);
				}
				HSSFCell cell = row.getCell(colNum);
				if (cell == null) {
					cell = row.createCell(colNum);
				}
				
				Utils.SetCellValue(workbook, cell, this.CellType, CellValue);
				if (CellValue != null && CellValue.indexOf('\n') != -1) {
					HSSFCellStyle newStyle = ((HSSFWorkbook)workbook).createCellStyle();
					newStyle.cloneStyleFrom(style);
					newStyle.setWrapText(true);
					cell.setCellStyle(newStyle);
				} else if (this.CellFormat != null) {
					cell.setCellStyle(style);
				}
				
				if (this.CellFormat != null && this.CellFormat.getAutofitColumn()) {
					sheet.autoSizeColumn(colNum);
				}
			} else {
				XSSFSheet sheet = ((XSSFWorkbook)workbook).getSheet(this.SheetName);
				if (sheet == null) { throw new Exception("Sheet: " + this.SheetName + " not found!"); }
				
				XSSFCellStyle style = ((XSSFWorkbook)workbook).createCellStyle();
				Utils.CreateStyle(workbook, style, this.CellFormat, docType);
				if (this.CellType == CellType.datetime && this.CellFormat != null && this.CellFormat.getCustomFormat() == null) {
					style.setDataFormat(workbook.getCreationHelper().createDataFormat().getFormat("yyyy-MM-dd HH:mm:ss"));
				}
				
				Integer rowNum = this.Row.intValue();
				Integer colNum = this.Column.intValue();
				
				XSSFRow row = sheet.getRow(rowNum);
				if (row == null) {
					row = sheet.createRow(rowNum);
				}
				XSSFCell cell = row.getCell(colNum);
				if (cell == null) {
					cell = row.createCell(colNum);
				}
				
				Utils.SetCellValue(workbook, cell, this.CellType, CellValue);
				if (CellValue != null && CellValue.indexOf('\n') != -1) {
					XSSFCellStyle newStyle = ((XSSFWorkbook)workbook).createCellStyle();
					newStyle.cloneStyleFrom(style);
					newStyle.setWrapText(true);
					cell.setCellStyle(newStyle);
				} else if (this.CellFormat != null) {
					cell.setCellStyle(style);
				}
				
				if (this.CellFormat != null && this.CellFormat.getAutofitColumn()) {
					sheet.autoSizeColumn(colNum);
				}
			}
			
			return true;
		} catch (Exception e) {
			logger.error("ERROR in Advanced_Excel.Cell_WriteByIndex: " + e.getMessage() + "\n" + e.toString(), e);
			return false;
		} 
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "Cell_WriteByIndex";
	}

	// BEGIN EXTRA CODE
	protected static ILogNode logger = Core.getLogger("Advanced_Excel");
	// END EXTRA CODE
}
