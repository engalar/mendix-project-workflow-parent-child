// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package advanced_excel.actions;

import advanced_excel.proxies.CellType;
import advanced_excel.proxies.DocumentType;
import advanced_excel.Utils;
import com.mendix.core.Core;
import com.mendix.logging.ILogNode;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.core.objectmanagement.member.*;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.systemwideinterfaces.core.IMendixObjectMember;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import java.util.Map;
import java.util.List;
import java.util.Date;
import java.util.ArrayList;
import java.util.Arrays;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.io.FileOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.ByteArrayInputStream;

/**
 * Export a list into an excel file. The first row will contain the name of the attribute of the list entity.
 */
public class ListToExcel extends CustomJavaAction<java.lang.Boolean>
{
	private java.lang.String SheetName;
	private java.util.List<IMendixObject> List;
	private java.lang.String ListType;
	private IMendixObject __TitleFormat;
	private advanced_excel.proxies.CellFormat TitleFormat;
	private IMendixObject __CellFormat;
	private advanced_excel.proxies.CellFormat CellFormat;
	private java.lang.String AttributeOrder;

	public ListToExcel(IContext context, java.lang.String SheetName, java.util.List<IMendixObject> List, java.lang.String ListType, IMendixObject TitleFormat, IMendixObject CellFormat, java.lang.String AttributeOrder)
	{
		super(context);
		this.SheetName = SheetName;
		this.List = List;
		this.ListType = ListType;
		this.__TitleFormat = TitleFormat;
		this.__CellFormat = CellFormat;
		this.AttributeOrder = AttributeOrder;
	}

	@java.lang.Override
	public java.lang.Boolean executeAction() throws Exception
	{
		this.TitleFormat = __TitleFormat == null ? null : advanced_excel.proxies.CellFormat.initialize(getContext(), __TitleFormat);

		this.CellFormat = __CellFormat == null ? null : advanced_excel.proxies.CellFormat.initialize(getContext(), __CellFormat);

		// BEGIN USER CODE
		try
		{
			DocumentType docType = Utils.GetDocumentType();
			Workbook workbook = Utils.GetWorkBook();
			
			String[] attrOrder = AttributeOrder == null ? new String[0] : AttributeOrder.split(";");
			Sheet sheet;
			Row row;
			Cell cell;
			CellStyle style;
			CellStyle dateStyle;
			CellStyle title;
			if (docType == DocumentType.XLS) {
				sheet = ((HSSFWorkbook)workbook).getSheet(this.SheetName);
				if (sheet == null) { throw new Exception("Sheet: " + this.SheetName + " not found!"); }
				
				style = ((HSSFWorkbook)workbook).createCellStyle();
				Utils.CreateStyle(workbook, style, this.CellFormat, docType);
				
				dateStyle = ((HSSFWorkbook)workbook).createCellStyle();
				Utils.CreateStyle(workbook, dateStyle, this.CellFormat, docType);
				dateStyle.setDataFormat(workbook.getCreationHelper().createDataFormat().getFormat("yyyy-MM-dd HH:mm:ss"));
				
				title = ((HSSFWorkbook)workbook).createCellStyle();
				Utils.CreateStyle(workbook, title, this.TitleFormat, docType);
			} else {
				sheet = ((XSSFWorkbook)workbook).getSheet(this.SheetName);
				if (sheet == null) { throw new Exception("Sheet: " + this.SheetName + " not found!"); }
				
				style = ((XSSFWorkbook)workbook).createCellStyle();
				Utils.CreateStyle(workbook, style, this.CellFormat, docType);
				
				dateStyle = ((XSSFWorkbook)workbook).createCellStyle();
				Utils.CreateStyle(workbook, dateStyle, this.CellFormat, docType);
				dateStyle.setDataFormat(workbook.getCreationHelper().createDataFormat().getFormat("yyyy-MM-dd HH:mm:ss"));
				
				title = ((XSSFWorkbook)workbook).createCellStyle();
				Utils.CreateStyle(workbook, title, this.TitleFormat, docType);
			}

			Integer rowNum = 0;
			Integer colNum = 0;
			for (IMendixObject obj:List)
			{
				colNum = 0;
				Map<String, ? extends IMendixObjectMember<?>> members = obj.getMembers(this.getContext());
				
				// Create Title row
				if (rowNum == 0)
				{
					if (docType == DocumentType.XLS) {
						row = ((HSSFSheet)sheet).getRow(rowNum);
						if (row == null) {
							row = ((HSSFSheet)sheet).createRow(rowNum);
						}
					} else {
						row = ((XSSFSheet)sheet).getRow(rowNum);
						if (row == null) {
							row = ((XSSFSheet)sheet).createRow(rowNum);
						}
					}
					if (attrOrder.length == 0) {
						for (String key : members.keySet()) {
							IMendixObjectMember<?> m = members.get(key);
							if (m.isVirtual()) {
								continue;
							}
							if (m instanceof MendixAutoNumber) {
								continue;
							}
							
							if (docType == DocumentType.XLS) {
								cell = ((HSSFRow)row).getCell(colNum);
								if (cell == null) {
									cell = ((HSSFRow)row).createCell(colNum);
								}
							} else {
								cell = ((XSSFRow)row).getCell(colNum);
								if (cell == null) {
									cell = ((XSSFRow)row).createCell(colNum);
								}
							}
							Utils.SetCellValue(workbook, cell, CellType.text, m.getName());
							if (this.TitleFormat != null) { cell.setCellStyle(title); };
							colNum++;
						}
					} else {
						for (String attr : attrOrder) {
							if (docType == DocumentType.XLS) {
								cell = ((HSSFRow)row).getCell(colNum);
								if (cell == null) {
									cell = ((HSSFRow)row).createCell(colNum);
								}
							} else {
								cell = ((XSSFRow)row).getCell(colNum);
								if (cell == null) {
									cell = ((XSSFRow)row).createCell(colNum);
								}
							}
								
							if (attr.contains("/")) {
								String[] paths = attr.split("/");
								int attPos = paths.length - 1;
								
								if (paths[attPos].contains(":")) {
									String[] names = paths[attPos].split(":");
									Utils.SetCellValue(workbook, cell, CellType.text, names[1]);
									if (this.TitleFormat != null) { cell.setCellStyle(title); };
								} else {
									Utils.SetCellValue(workbook, cell, CellType.text, paths[1]);
									if (this.TitleFormat != null) { cell.setCellStyle(title); };
								}
							}
							else {
								if (attr.contains(":")) {
									String[] names = attr.split(":");
									Utils.SetCellValue(workbook, cell, CellType.text, names[1]);
									if (this.TitleFormat != null) { cell.setCellStyle(title); };
								} else {
									IMendixObjectMember<?> m = obj.getMember(this.getContext(), attr);
									if (m.isVirtual()) {
										continue;
									}
									if (m instanceof MendixAutoNumber) {
										continue;
									}
									
									Utils.SetCellValue(workbook, cell, CellType.text, m.getName());
									if (this.TitleFormat != null) { cell.setCellStyle(title); };
								}
							}
							colNum++;
						}
					}
				
					rowNum++;
					colNum = 0;
				}
			
				if (docType == DocumentType.XLS) {
					row = ((HSSFSheet)sheet).getRow(rowNum);
					if (row == null) {
						row = ((HSSFSheet)sheet).createRow(rowNum);
					}
				} else {
					row = ((XSSFSheet)sheet).getRow(rowNum);
					if (row == null) {
						row = ((XSSFSheet)sheet).createRow(rowNum);
					}
				}
				
				if (attrOrder.length == 0) {
					for (String key : members.keySet()) {
						IMendixObjectMember<?> m = members.get(key);
						if (m.isVirtual()) {
							continue;
						}
						if (m instanceof MendixAutoNumber) {
							continue;
						}
						
						if (docType == DocumentType.XLS) {
							cell = ((HSSFRow)row).getCell(colNum);
							if (cell == null) {
								cell = ((HSSFRow)row).createCell(colNum);
							}
						} else {
							cell = ((XSSFRow)row).getCell(colNum);
							if (cell == null) {
								cell = ((XSSFRow)row).createCell(colNum);
							}
						}
						
						if (SetMemberValue(this.getContext(), m, workbook, cell)) {
							cell.setCellStyle(dateStyle);
						} else if (this.CellFormat != null) {
							cell.setCellStyle(style);
						}
						colNum++;
					}
				} else {
					for (String attr : attrOrder) {
						if (docType == DocumentType.XLS) {
							cell = ((HSSFRow)row).getCell(colNum);
							if (cell == null) {
								cell = ((HSSFRow)row).createCell(colNum);
							}
						} else {
							cell = ((XSSFRow)row).getCell(colNum);
							if (cell == null) {
								cell = ((XSSFRow)row).createCell(colNum);
							}
						}
						
						IMendixObjectMember<?> m;
						if (attr.contains("/")) {
							String[] paths = attr.split("/");
							int attPos = paths.length - 1;
							
							List<IMendixObject> curObjs = Arrays.asList(obj);
							for (int i = 0; i < attPos; i++) {
								List<IMendixObject> objs = Core.retrieveByPath(this.getContext(), curObjs.get(0), paths[i]);
								if (objs.size() > 1 && i < attPos - 1) { throw new Exception("too much associated object found: " + paths[i] + "\nPath: " + attr); }
								else if (objs.size() == 0) { colNum++; curObjs = null; continue; }
								
								curObjs = objs;
							}
							
							if (curObjs == null) { continue; }
							
							if (curObjs.size() > 1) {
								String valStr = "";
								for (IMendixObject curObj : curObjs) {
									if (paths[attPos].contains(":")) {
										String[] names = paths[attPos].split(":");
										m = curObj.getMember(this.getContext(), names[0]);
									} else {
										m = curObj.getMember(this.getContext(), paths[attPos]);
									}
									var val = m.getValue(this.getContext());
									if (val == null) { continue; }
									
									valStr = valStr == "" ? val.toString() : valStr + "\r\n" + val.toString();
								}
								
								Utils.SetCellValue(workbook, cell, CellType.text, valStr);
								style.setWrapText(true);
								cell.setCellStyle(style);
								colNum++;
								continue;
							} else {
								if (paths[attPos].contains(":")) {
									String[] names = paths[attPos].split(":");
									m = curObjs.get(0).getMember(this.getContext(), names[0]);
								} else {
									m = curObjs.get(0).getMember(this.getContext(), paths[attPos]);
								}
							}
						} else {
							if (attr.contains(":")) {
								String[] names = attr.split(":");
								m = obj.getMember(this.getContext(), names[0]);
							} else {
								m = obj.getMember(this.getContext(), attr);
							}
						}
						
						if (m.isVirtual()) {
							continue;
						}
						if (m instanceof MendixAutoNumber) {
							continue;
						}
						
						if (SetMemberValue(this.getContext(), m, workbook, cell)) {
							cell.setCellStyle(dateStyle);
						} else if (this.CellFormat != null) {
							cell.setCellStyle(style);
						}
						colNum++;
					}
				}
				rowNum++;
			}
			
			if ((this.CellFormat != null && this.CellFormat.getAutofitColumn()) || (this.TitleFormat != null && this.TitleFormat.getAutofitColumn())) {
				for (int i = 0; i < colNum; i++)
				{ sheet.autoSizeColumn(i); }
			}
			
			return true;
		} catch (Exception e) {
			logger.error("ERROR in Advanced_Excel.ListToExcel: " + e.getMessage() + "\n" + e.toString(), e);
			return false;
		}
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "ListToExcel";
	}

	// BEGIN EXTRA CODE
	protected static ILogNode logger = Core.getLogger("Advanced_Excel");
	
	protected static Boolean SetMemberValue(IContext context, IMendixObjectMember<?> member, Workbook workbook, Cell cell)
	{
		CellType cellType = CellType.text;
		var val = member.getValue(context);
		String valStr = val == null ? "" : val.toString();
		if (member instanceof MendixInteger) { cellType = CellType.integer; }
		else if (member instanceof MendixBoolean) { cellType = CellType._boolean; }
		else if (member instanceof MendixDecimal) { cellType = CellType.decimal; }
		else if (member instanceof MendixLong) { cellType = CellType.integer; }
		else if (member instanceof MendixString) { cellType = CellType.text; }
		else if (member instanceof MendixDateTime) {
			cellType = CellType.datetime;
			DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");  
			valStr = val == null ? "" : dateFormat.format((Date)val);
		}
		
		Utils.SetCellValue(workbook, cell, cellType, valStr);
		return cellType == CellType.datetime;
	}
	// END EXTRA CODE
}
