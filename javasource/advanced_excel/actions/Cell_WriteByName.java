// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package advanced_excel.actions;

import com.mendix.core.Core;
import com.mendix.logging.ILogNode;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import advanced_excel.proxies.DocumentType;
import advanced_excel.Utils;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.util.AreaReference;
import org.apache.poi.ss.util.CellReference;
import org.apache.poi.ss.SpreadsheetVersion;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFName;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFName;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;

/**
 * Write a converted value to a cell, defined by its name
 * Accepts format for the target cell
 */
public class Cell_WriteByName extends CustomJavaAction<java.lang.Boolean>
{
	private java.lang.String CellName;
	private java.lang.String CellValue;
	private advanced_excel.proxies.CellType CellType;
	private IMendixObject __CellFormat;
	private advanced_excel.proxies.CellFormat CellFormat;

	public Cell_WriteByName(IContext context, java.lang.String CellName, java.lang.String CellValue, java.lang.String CellType, IMendixObject CellFormat)
	{
		super(context);
		this.CellName = CellName;
		this.CellValue = CellValue;
		this.CellType = CellType == null ? null : advanced_excel.proxies.CellType.valueOf(CellType);
		this.__CellFormat = CellFormat;
	}

	@java.lang.Override
	public java.lang.Boolean executeAction() throws Exception
	{
		this.CellFormat = __CellFormat == null ? null : advanced_excel.proxies.CellFormat.initialize(getContext(), __CellFormat);

		// BEGIN USER CODE
		try
		{
			DocumentType docType = Utils.GetDocumentType();
			Workbook workbook = Utils.GetWorkBook();
			
			if (docType == DocumentType.XLS) {
				HSSFCellStyle style = ((HSSFWorkbook)workbook).createCellStyle();
				Utils.CreateStyle(workbook, style, this.CellFormat, docType);
				if (this.CellType == CellType.datetime) {
					style.setDataFormat(workbook.getCreationHelper().createDataFormat().getFormat("yyyy-MM-dd HH:mm:ss"));
				}
				
				Boolean AutofitColumn = false;
				String CustomFormat = null;
				if (this.CellFormat != null)
				{
					AutofitColumn = this.CellFormat.getAutofitColumn();
					CustomFormat = this.CellFormat.getCustomFormat();
				}

				// retrieve the named range
				int cellIndex = workbook.getNameIndex(CellName);
				HSSFName aNamedCell = ((HSSFWorkbook)workbook).getNameAt(cellIndex);

				// retrieve the cell at the named range and test its contents
				AreaReference aref = new AreaReference(aNamedCell.getRefersToFormula(), SpreadsheetVersion.EXCEL97);
				CellReference[] crefs = aref.getAllReferencedCells();
				for (int i=0; i<crefs.length; i++) {
					HSSFSheet sheet = ((HSSFWorkbook)workbook).getSheet(crefs[i].getSheetName());
					HSSFRow row = sheet.getRow(crefs[i].getRow());
					Short colNum = crefs[i].getCol();
					HSSFCell cell = row.getCell(colNum);

					Utils.SetCellValue(workbook, cell, this.CellType, CellValue);
					if (CustomFormat != null) {
						style.setDataFormat(workbook.getCreationHelper().createDataFormat().getFormat(CustomFormat));
					}
					
					if (CellValue != null && CellValue.indexOf('\n') != -1) {
						HSSFCellStyle newStyle = ((HSSFWorkbook)workbook).createCellStyle();
						newStyle.cloneStyleFrom(style);
						newStyle.setWrapText(true);
						cell.setCellStyle(newStyle);
					} else if (this.CellFormat != null) {
						cell.setCellStyle(style);
					}
					
					if (AutofitColumn) {
						sheet.autoSizeColumn(colNum);
					}
				}
			} else {
				XSSFCellStyle style = ((XSSFWorkbook)workbook).createCellStyle();
				Utils.CreateStyle(workbook, style, this.CellFormat, docType);
				if (this.CellType == CellType.datetime) {
					style.setDataFormat(workbook.getCreationHelper().createDataFormat().getFormat("yyyy-MM-dd HH:mm:ss"));
				}
				
				Boolean AutofitColumn = false;
				String CustomFormat = null;
				if (this.CellFormat != null)
				{
					AutofitColumn = this.CellFormat.getAutofitColumn();
					CustomFormat = this.CellFormat.getCustomFormat();
				}

				// retrieve the named range
				int cellIndex = workbook.getNameIndex(CellName);
				XSSFName aNamedCell = ((XSSFWorkbook)workbook).getNameAt(cellIndex);

				// retrieve the cell at the named range and test its contents
				AreaReference aref = new AreaReference(aNamedCell.getRefersToFormula(), SpreadsheetVersion.EXCEL2007);
				CellReference[] crefs = aref.getAllReferencedCells();
				for (int i=0; i<crefs.length; i++) {
					XSSFSheet sheet = ((XSSFWorkbook)workbook).getSheet(crefs[i].getSheetName());
					XSSFRow row = sheet.getRow(crefs[i].getRow());
					Short colNum = crefs[i].getCol();
					XSSFCell cell = row.getCell(colNum);

					Utils.SetCellValue(workbook, cell, this.CellType, CellValue);
					if (CustomFormat != null) {
						style.setDataFormat(workbook.getCreationHelper().createDataFormat().getFormat(CustomFormat));
					}
					
					if (CellValue != null && CellValue.indexOf('\n') != -1) {
						XSSFCellStyle newStyle = ((XSSFWorkbook)workbook).createCellStyle();
						newStyle.cloneStyleFrom(style);
						newStyle.setWrapText(true);
						cell.setCellStyle(newStyle);
					} else if (this.CellFormat != null) {
						cell.setCellStyle(style);
					}
				
					if (AutofitColumn) {
						sheet.autoSizeColumn(colNum);
					}
				}
			}
			
			return true;
		} catch (Exception e) {
			logger.error("ERROR in Advanced_Excel.Cell_WriteByName: " + e.getMessage() + "\n" + e.toString(), e);
			return false;
		} 
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "Cell_WriteByName";
	}

	// BEGIN EXTRA CODE
	protected static ILogNode logger = Core.getLogger("Advanced_Excel");
	// END EXTRA CODE
}
