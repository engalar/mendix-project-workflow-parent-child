// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package advanced_excel.actions;

import com.mendix.core.Core;
import com.mendix.logging.ILogNode;
import java.io.IOException;
import advanced_excel.proxies.Data;
import advanced_excel.proxies.DocumentType;
import advanced_excel.Utils;
import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import java.util.List;
import java.util.ArrayList;

/**
 * Reads the value of a cell, defined by its index.
 */
public class Row_ReadByIndex extends CustomJavaAction<java.util.List<IMendixObject>>
{
	private java.lang.String SheetName;
	private java.lang.Long Row;

	public Row_ReadByIndex(IContext context, java.lang.String SheetName, java.lang.Long Row)
	{
		super(context);
		this.SheetName = SheetName;
		this.Row = Row;
	}

	@java.lang.Override
	public java.util.List<IMendixObject> executeAction() throws Exception
	{
		// BEGIN USER CODE
		try
		{
			IMendixObject data;
			List<IMendixObject> DataList = new ArrayList<IMendixObject>();
			DataFormatter formatter = new DataFormatter();
			IContext context = this.getContext();
			DocumentType docType = Utils.GetDocumentType();
			Workbook workbook = Utils.GetWorkBook();
			
			Sheet sheet = workbook.getSheet(this.SheetName);
			if (sheet == null) { throw new Exception("Sheet: " + this.SheetName + " not found!"); }
			Integer rowNum = this.Row.intValue();
			
			Cell cell;
			Row row = sheet.getRow(rowNum);
			if (row == null) { return null; }
			int cellTotal = row.getPhysicalNumberOfCells();
			
			for (int i = 0; i < cellTotal; i++)
			{
				cell = row.getCell(i);
				if (cell == null) { continue; }
				
				data = Core.instantiate(context, "Advanced_Excel.Data");
				data.setValue​(context, "Row", rowNum);
				data.setValue​(context, "Column", i);
				data.setValue​(context, "CellValue", formatter.formatCellValue(cell));
				DataList.add(data);
			}
			
			return DataList;
		} catch (Exception e) {
			logger.error("ERROR in Advanced_Excel.Cell_ReadByIndex: " + e.getMessage() + "\n" + e.toString(), e);
			return null;
		} 
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "Row_ReadByIndex";
	}

	// BEGIN EXTRA CODE
	protected static ILogNode logger = Core.getLogger("Advanced_Excel");
	// END EXTRA CODE
}
